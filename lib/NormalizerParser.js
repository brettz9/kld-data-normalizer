/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,8],$V3=[1,7],$V4=[8,27,28,38,41,44,46,56],$V5=[1,36],$V6=[1,35],$V7=[1,6,19,20,21,22,23,24,25,27,28,30,31,33,35,37,38,40,41,50,54,57,59,60,66],$V8=[28,38,41],$V9=[1,51],$Va=[1,55],$Vb=[1,56],$Vc=[1,70],$Vd=[1,58],$Ve=[1,59],$Vf=[1,60],$Vg=[1,71],$Vh=[1,61],$Vi=[1,62],$Vj=[1,64],$Vk=[1,66],$Vl=[1,68],$Vm=[1,69],$Vn=[1,77],$Vo=[19,20,21,22,23,24,25,27,28,30,31,33,35,37,38,40,41,50,54,57,59,60,66],$Vp=[1,84],$Vq=[1,89],$Vr=[28,38,41,50],$Vs=[1,97],$Vt=[22,57,59],$Vu=[22,57,59,60],$Vv=[28,59],$Vw=[1,110],$Vx=[1,119],$Vy=[1,118],$Vz=[57,59],$VA=[28,38,41,54],$VB=[19,20,21,23,24,25,27,28,30,31,33,35,37,38,40,41,50,54],$VC=[19,20,21,23,24,25,27,28,30,31,33,35,37,38,40,41];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"typeDeclarations":4,"typeDeclaration":5,"TYPE":6,"stringOrIdentifier":7,"=":8,"typeDescription":9,"anyDescription":10,"arrayDescription":11,"booleanDescription":12,"enumerationDescription":13,"nullDescription":14,"numberDescription":15,"objectDescription":16,"stringDescription":17,"undefinedDescription":18,"ANY_TYPE":19,"ARRAY_TYPE":20,"[":21,"]":22,"BOOLEAN_TYPE":23,"TRUE":24,"FALSE":25,"ENUMERATION":26,"{":27,"}":28,"identifiers":29,"NULL_TYPE":30,"NUMBER_TYPE":31,"float":32,"OBJECT_TYPE":33,"canonicalProperties":34,"STRING_TYPE":35,"string":36,"UNDEFINED_TYPE":37,"STRING":38,"integer":39,"NUMBER":40,"IDENTIFIER":41,"canonicalProperty":42,"groupBlock":43,":":44,"typePattern":45,"<=":46,"expression":47,"groups":48,"group":49,"GROUP":50,"patternMatches":51,"namedTypePattern":52,"patternMatch":53,"MATCH":54,"typePatterns":55,"(":56,")":57,"parameterList":58,",":59,"AS":60,"arrayPattern":61,"objectPattern":62,"elements":63,"namedElement":64,"element":65,";":66,"range":67,"..":68,"properties":69,"namedProperty":70,"property":71,"$accept":0,"$end":1},
terminals_: {2:"error",6:"TYPE",8:"=",19:"ANY_TYPE",20:"ARRAY_TYPE",21:"[",22:"]",23:"BOOLEAN_TYPE",24:"TRUE",25:"FALSE",26:"ENUMERATION",27:"{",28:"}",30:"NULL_TYPE",31:"NUMBER_TYPE",33:"OBJECT_TYPE",35:"STRING_TYPE",37:"UNDEFINED_TYPE",38:"STRING",40:"NUMBER",41:"IDENTIFIER",44:":",46:"<=",50:"GROUP",54:"MATCH",56:"(",57:")",59:",",60:"AS",66:";",68:".."},
productions_: [0,[3,1],[4,2],[4,1],[5,4],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[10,1],[11,1],[11,2],[12,1],[12,1],[12,1],[13,3],[13,4],[14,1],[15,1],[15,1],[16,1],[16,2],[16,3],[17,1],[17,1],[18,1],[29,2],[29,1],[36,1],[39,1],[32,1],[7,1],[7,1],[34,2],[34,1],[42,1],[42,2],[42,3],[42,4],[43,2],[43,3],[48,2],[48,1],[49,4],[49,3],[51,2],[51,1],[53,4],[53,5],[53,3],[47,1],[47,3],[47,4],[58,3],[58,1],[55,2],[55,1],[52,1],[52,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[61,2],[61,3],[63,3],[63,1],[64,1],[64,3],[65,1],[65,3],[65,3],[65,5],[67,3],[67,2],[67,2],[67,1],[62,2],[62,3],[69,3],[69,1],[70,1],[70,3],[71,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0];
break;
case 2: case 31: case 38: case 46: case 50: case 60:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 3: case 32: case 39: case 47: case 51: case 59: case 61: case 82: case 96:
this.$ = [ $$[$0] ];
break;
case 4:
this.$ = { type: 'type-declaration', name: $$[$0-2], declaration: $$[$0] };
break;
case 14:
this.$ = { type: 'any', value: null };
break;
case 15:
this.$ = { type: 'array', value: null };
break;
case 16:
this.$ = { type: 'array-instance', value: [] };
break;
case 17:
this.$ = { type: 'boolean', value: null };
break;
case 18:
this.$ = { type: 'boolean-instance', value: true };
break;
case 19:
this.$ = { type: 'boolean-instance', value: false };
break;
case 20:
this.$ = { type: 'enumeration', value: [] };
break;
case 21:
this.$ = { type: 'enumeration', value: $$[$0-1] };
break;
case 22:
this.$ = { type: 'null', value: null };
break;
case 23:
this.$ = { type: 'number', value: null };
break;
case 24:
this.$ = { type: 'number-instance', value: $$[$0] };
break;
case 25:
this.$ = { type: 'object', value: null };
break;
case 26:
this.$ = { type: 'object-instance', value: {} };
break;
case 27:
this.$ = { type: 'object-instance', value: $$[$0-1] };
break;
case 28:
this.$ = { type: 'string', value: null };
break;
case 29:
this.$ = { type: 'string-instance', value: $$[$0]};
break;
case 30:
this.$ = { type: 'undefined', value: null };
break;
case 33: case 37:
this.$ = $$[$0].substring(1,  $$[$0].length - 1);
break;
case 34:
this.$ = parseInt($$[$0]);
break;
case 35:
this.$ = parseFloat($$[$0]);
break;
case 36:
this.$ = $$[$0]
break;
case 40:
this.$ = { type: 'canonical-property', name: $$[$0], groups: [], returnValue: null };
break;
case 41:
this.$ = { type: 'canonical-property', name: $$[$0-1], groups: $$[$0], returnValue: null };
break;
case 42:
this.$ = {
    type: "canonical-property",
    name: $$[$0-2],
    groups: [
        {
            type: "group",
            matches: [ { type: "match", name: $$[$0-2], patterns: [ $$[$0] ] } ]
        }
    ],
    returnValue: null
};
break;
case 43:
this.$ = { type: 'canonical-property', name: $$[$0-3], groups: $$[$0], returnValue: $$[$0-1] };
break;
case 44:
this.$ = [];
break;
case 45:
this.$ = $$[$0-1];
break;
case 48:
this.$ = { type: 'group', matches: $$[$0-1] };
break;
case 49:
this.$ = { type: 'group', matches: [ { type: 'match', name: $$[$0-2], patterns: [ $$[$0] ] } ] };
break;
case 52:
this.$ = { type: 'match', name: $$[$0-2], patterns: [] };
break;
case 53:
this.$ = { type: 'match', name: $$[$0-3], patterns: $$[$0-1] };
break;
case 54:
this.$ = { type: "match", name: $$[$0-2], patterns: [ $$[$0] ] }
break;
case 55:
this.$ = { type: 'expression', expression: { type: 'get-value', name: $$[$0] } };
break;
case 56:
this.$ = { type: 'expression', expression: { type: 'invoke', name: $$[$0-2], args: [] } };
break;
case 57:
this.$ = { type: 'expression', expression: { type: 'invoke', name: $$[$0-3], args: $$[$0-1] } };
break;
case 58: case 81: case 95:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 62: case 83:
$$[$0].assignTo = null; this.$ = $$[$0];
break;
case 63: case 84: case 98:
$$[$0-2].assignTo = $$[$0]; this.$ = $$[$0-2];
break;
case 64:
this.$ = { type: 'pattern', patternType: 'any', value: null };
break;
case 65:
this.$ = { type: 'pattern', patternType: 'array', value: null };
break;
case 66: case 74:
this.$ = $$[$0];
break;
case 67:
this.$ = { type: 'pattern', patternType: 'boolean', value: null };
break;
case 68:
this.$ = { type: 'pattern', patternType: 'boolean', value: true };
break;
case 69:
this.$ = { type: 'pattern', patternType: 'boolean', value: false };
break;
case 70:
this.$ = { type: 'pattern', patternType: 'null', value: null };
break;
case 71:
this.$ = { type: 'pattern', patternType: 'number', value: null };
break;
case 72:
this.$ = { type: 'pattern', patternType: 'number', value: $$[$0] };
break;
case 73: case 93:
this.$ = { type: 'pattern', patternType: 'object', value: null };
break;
case 75:
this.$ = { type: 'pattern', patternType: 'string', value: null };
break;
case 76:
this.$ = { type: 'pattern', patternType: 'string', value: $$[$0] };
break;
case 77:
this.$ = { type: 'pattern', patternType: 'undefined', value: null };
break;
case 78:
this.$ = { type: 'pattern', value: $$[$0] };
break;
case 79:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: [] };
break;
case 80:
this.$ = { type: 'pattern', patternType: 'array-pattern', value: $$[$0-1] };
break;
case 85:
this.$ = { type: 'element', pattern: $$[$0], range: { type: 'range', start: 1, stop: 1 } };
break;
case 86:
this.$ = { type: 'element', pattern: $$[$0-2], range: $$[$0] };
break;
case 87:
this.$ = { type: 'element-group', elements: $$[$0-1], range: { type: 'range', start: 1, stop: 1 } };
break;
case 88:
this.$ = { type: 'element-group', elements: $$[$0-3], range: $$[$0] };
break;
case 89:
this.$ = { type: 'range', start: $$[$0-2], stop: $$[$0] };
break;
case 90:
this.$ = { type: 'range', start: 0, stop: $$[$0] };
break;
case 91:
this.$ = { type: 'range', start: $$[$0-1], stop: Infinity };
break;
case 92:
this.$ = { type: 'range', start: $$[$0], stop: $$[$0] };
break;
case 94:
this.$ = { type: 'pattern', patternType: 'object-pattern', value: $$[$0-1] };
break;
case 97:
$$[$0].assignTo = $$[$0].name; this.$ = $$[$0];
break;
case 99:
this.$ = { type: 'property', name: $$[$0-2], pattern: $$[$0] };
break;
}
},
table: [{3:1,4:2,5:3,6:$V0},{1:[3]},{1:[2,1],5:5,6:$V0},o($V1,[2,3]),{7:6,38:$V2,41:$V3},o($V1,[2,2]),{8:[1,9]},o($V4,[2,36]),o($V4,[2,37]),{9:10,10:11,11:12,12:13,13:14,14:15,15:16,16:17,17:18,18:19,19:[1,20],20:[1,21],21:[1,22],23:[1,23],24:[1,24],25:[1,25],26:[1,26],27:[1,31],30:[1,27],31:[1,28],32:29,33:[1,30],35:[1,32],36:33,37:[1,34],38:$V5,40:$V6},o($V1,[2,4]),o($V1,[2,5]),o($V1,[2,6]),o($V1,[2,7]),o($V1,[2,8]),o($V1,[2,9]),o($V1,[2,10]),o($V1,[2,11]),o($V1,[2,12]),o($V1,[2,13]),o($V1,[2,14]),o($V1,[2,15]),{22:[1,37]},o($V1,[2,17]),o($V1,[2,18]),o($V1,[2,19]),{27:[1,38]},o($V1,[2,22]),o($V1,[2,23]),o($V1,[2,24]),o($V1,[2,25]),{7:42,28:[1,39],34:40,38:$V2,41:$V3,42:41},o($V1,[2,28]),o($V1,[2,29]),o($V1,[2,30]),o($V7,[2,35]),o($V7,[2,33]),o($V1,[2,16]),{7:45,28:[1,43],29:44,38:$V2,41:$V3},o($V1,[2,26]),{7:42,28:[1,46],38:$V2,41:$V3,42:47},o($V8,[2,39]),o($V8,[2,40],{43:48,27:$V9,44:[1,49],46:[1,50]}),o($V1,[2,20]),{7:53,28:[1,52],38:$V2,41:$V3},o($V8,[2,32]),o($V1,[2,27]),o($V8,[2,38]),o($V8,[2,41]),{19:$Va,20:$Vb,21:$Vc,23:$Vd,24:$Ve,25:$Vf,27:$Vg,30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:54,61:57,62:65},{7:73,38:$V2,41:$V3,47:72},{7:78,28:[1,74],38:$V2,41:$V3,48:75,49:76,50:$Vn},o($V1,[2,21]),o($V8,[2,31]),o($V8,[2,42]),o($Vo,[2,64]),o($Vo,[2,65]),o($Vo,[2,66]),o($Vo,[2,67]),o($Vo,[2,68]),o($Vo,[2,69]),o($Vo,[2,70]),o($Vo,[2,71]),o($Vo,[2,72]),o($Vo,[2,73]),o($Vo,[2,74]),o($Vo,[2,75]),o($Vo,[2,76]),o($Vo,[2,77]),o($Vo,[2,78]),{19:$Va,20:$Vb,21:$Vc,22:[1,79],23:$Vd,24:$Ve,25:$Vf,27:$Vg,30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:83,56:$Vp,61:57,62:65,63:80,64:81,65:82},{28:[1,85],41:$Vq,69:86,70:87,71:88},{27:$V9,43:90},{27:[2,55],56:[1,91]},o($V8,[2,44]),{7:78,28:[1,92],38:$V2,41:$V3,49:93,50:$Vn},o($Vr,[2,47]),{27:[1,94]},{44:[1,95]},o($Vo,[2,79]),{22:[1,96],59:$Vs},o($Vt,[2,82]),o($Vt,[2,83],{60:[1,98]}),o($Vu,[2,85],{66:[1,99]}),{19:$Va,20:$Vb,21:$Vc,23:$Vd,24:$Ve,25:$Vf,27:$Vg,30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:83,56:$Vp,61:57,62:65,63:100,64:81,65:82},o($Vo,[2,93]),{28:[1,101],59:[1,102]},o($Vv,[2,96]),o($Vv,[2,97],{60:[1,103]}),{44:[1,104]},o($V8,[2,43]),{41:[1,107],57:[1,105],58:106},o($V8,[2,45]),o($Vr,[2,46]),{7:111,38:$V2,41:$V3,51:108,53:109,54:$Vw},{19:$Va,20:$Vb,21:$Vc,23:$Vd,24:$Ve,25:$Vf,27:$Vg,30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:113,52:112,61:57,62:65},o($Vo,[2,80]),{19:$Va,20:$Vb,21:$Vc,23:$Vd,24:$Ve,25:$Vf,27:$Vg,30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:83,56:$Vp,61:57,62:65,64:114,65:82},{41:[1,115]},{39:117,40:$Vx,67:116,68:$Vy},{57:[1,120],59:$Vs},o($Vo,[2,94]),{41:$Vq,70:121,71:88},{41:[1,122]},{19:$Va,20:$Vb,21:$Vc,23:$Vd,24:$Ve,25:$Vf,27:$Vg,30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:123,61:57,62:65},{27:[2,56]},{57:[1,124],59:[1,125]},o($Vz,[2,59]),{7:111,28:[1,126],38:$V2,41:$V3,53:127,54:$Vw},o($VA,[2,51]),{7:128,38:$V2,41:$V3},{44:[1,129]},o($Vr,[2,49]),o($VB,[2,62],{60:[1,130]}),o($Vt,[2,81]),o($Vt,[2,84]),o($Vu,[2,86]),o($Vu,[2,92],{68:[1,131]}),{39:132,40:$Vx},o([22,57,59,60,68],[2,34]),o($Vu,[2,87],{66:[1,133]}),o($Vv,[2,95]),o($Vv,[2,98]),o([28,59,60],[2,99]),{27:[2,57]},{41:[1,134]},o($Vr,[2,48]),o($VA,[2,50]),{27:[1,135]},{19:$Va,20:$Vb,21:$Vc,23:$Vd,24:$Ve,25:$Vf,27:$Vg,30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:113,52:136,61:57,62:65},{41:[1,137]},o($Vu,[2,91],{39:138,40:$Vx}),o($Vu,[2,90]),{39:117,40:$Vx,67:139,68:$Vy},o($Vz,[2,58]),{19:$Va,20:$Vb,21:$Vc,23:$Vd,24:$Ve,25:$Vf,27:$Vg,28:[1,140],30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:113,52:142,55:141,61:57,62:65},o($VA,[2,54]),o($VB,[2,63]),o($Vu,[2,89]),o($Vu,[2,88]),o($VA,[2,52]),{19:$Va,20:$Vb,21:$Vc,23:$Vd,24:$Ve,25:$Vf,27:$Vg,28:[1,143],30:$Vh,31:$Vi,32:63,33:$Vj,35:$Vk,36:67,37:$Vl,38:$V5,40:$V6,41:$Vm,45:113,52:144,61:57,62:65},o($VC,[2,61]),o($VA,[2,53]),o($VC,[2,60])],
defaultActions: {105:[2,56],124:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:return 19
break;
case 3:return 20
break;
case 4:return 60
break;
case 5:return 23
break;
case 6:return 26
break;
case 7:return 25
break;
case 8:return 50
break;
case 9:return 54
break;
case 10:return 30
break;
case 11:return 31
break;
case 12:return 33
break;
case 13:return 35
break;
case 14:return 24
break;
case 15:return 6
break;
case 16:return 37
break;
case 17:return 56
break;
case 18:return 57
break;
case 19:return 27
break;
case 20:return 28
break;
case 21:return 21
break;
case 22:return 22
break;
case 23:return 59
break;
case 24:return 44
break;
case 25:return 66
break;
case 26:return 8
break;
case 27:return 46
break;
case 28:return 68
break;
case 29:return 41
break;
case 30:return 40
break;
case 31:return 38
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:any)/,/^(?:array)/,/^(?:as)/,/^(?:boolean)/,/^(?:enumeration)/,/^(?:false)/,/^(?:group)/,/^(?:match)/,/^(?:null)/,/^(?:number)/,/^(?:object)/,/^(?:string)/,/^(?:true)/,/^(?:type)/,/^(?:undefined)/,/^(?:\()/,/^(?:\))/,/^(?:{)/,/^(?:})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:=)/,/^(?:<=)/,/^(?:\.\.)/,/^(?:[a-zA-Z_-][a-zA-Z0-9_-]*)/,/^(?:[-+]?(0|[1-9]\d*)(\.\d+)?)/,/^(?:"[^"\r\n]*")/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

export default parser;
