Ellipse = {
    center: Point2D(x, y) {
        type-match center {
            Point2D
            [x:number, y:number]
        }
        group {
            type-match centerX, cx {
                x:number
            }
            type-match centerY, cy {
                y:number
            }
        }
    }
    radii: Vector2D(rx, ry) {
        type-match radii {
            Vector2D
            [rx:number, ry:number]
        }
        group {
            type-match radiusX, rx {
                rx:number
            }
            type-match radiusY, ry {
                rx:number
            }
        }
    }
}

---
TypeDescription
    :   IDENTIFIER EQUAL ObjectDescription
    ;

ObjectDescription
    :   LCURLY PropertyList RCURLY
    ;

PropertyList
    :   Property
    |   PropertyList Property
    ;

Property
    :   IDENTIFIER COLON Instantiation LCURLY TransformAlternations RCURLY
    ;

Instantiation
    :   IDENTIFIER LPAREN RPAREN
    |   IDENTIFIER LPAREN ParameterList RPAREN
    ;

TransformAlternations
    :   TransformGroup
    |   TransformAlternations TransformGroup
    ;

ParameterList
    :   IDENTIFIER
    |   ParameterList COMMA IDENTIFIER
    ;

TransformGroup
    :   TypeMatch
    |   Group
    ;

TypeMatch
    :   TYPE_MATCH IDENTIFIER LCURLY Matches RCURLY
    ;

Group
    :   GROUP LCURLY Matches RCURLY
    ;

Matches
    :   Match
    |   Matches Match
    ;

Match
    :   IDENTIFIER
    |   ArrayMatch
    |   ObjectMatch
    ;

ArrayMatch
    :   LBRACKET RBRACKET
    |   LBRACKET Types RBRACKET
    ;

ObjectMatch
    :   LCURLY RCURLY
    |   LCURLY KeyValues RBRACKET
    ;

Types
    :   Type
    |   Types COMMA Type
    ;

KeyValues
    :   KeyValue
    |   KeyValues KeyValue

Type
    :   IDENTIFIER
    |   IDENTIFIER COLON IDENTIFIER
    ;

KeyValue
    :   IDENTIFIER COLON IDENTIFIER
    |   IDENTIFIER COLON IDENTIFIER FROM IDENTIFIER

---

// alternate syntax for `center`. This will create a new Point2D instance when we match any object that `x` and `y`
// number properties instead of returning the original Point2D

alt {
    match center
        {x:number, y:number}
        [x:number, y:number]
}

// alternate for separate radii

radiusX: number {
    alt {
        type-match radii
            {number, _}
            [number, _]
    }
    alt {
        type-match radiusX, rx
            number
    }
}
radiusY: number {
    alt {
        type-match radii
            {_, number}
            [_, number]
    }
    alt {
        type-match radiusY, ry
            number
    }
}

// alternate Ellipse for validation only

Ellipse = {
    center: Point2D
    radii: Point2D
}
